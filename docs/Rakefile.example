    # yes, the indentation is offset by 4. this is how it needs to be indented in the .md files
    #   we could probably fix this later with a template and some tooling to create the docs files
    # try me:  rake -T --rakefile docs/Rakefile.example
    require 'rototiller'

    desc 'the old, bad way. This is for the README.md file.'
      task :demo_old do |t|
        echo_args = ENV['COMMAND_NAME'] || "my_sweet_command #{ENV['HOME']}"
        overriding_options = ENV['OPTIONS'].to_s
        args = [echo_args, *overriding_options.split(' '), '--switch'].compact
        sh("echo", *args)
      end

    desc 'the new, rototiller way. This is for the README.md file.'
      rototiller_task :demo_new do |t|
        t.add_env({:name => 'FOO', :message => 'I am describing FOO, my task needs me, but has a default. this default will be set in the environment unless it exists', :default => 'FOO default'})
        t.add_env do |e|
          e.name    = 'HOME'
          e.message = 'I am describing HOME, my task needs me. all rototiller methods can take a hash or a block'
        end

        t.add_command do |c|
          c.name = 'echo my_sweet_command ${HOME}'
          c.add_env({:name => 'COMMAND_NAME', :message => 'use me to override this command name (`echo my_sweet_command`)'})
          # anti-pattern: this is really an option.  FIXME once add_option is implemented
          c.add_switch({:name => '--switch ${FOO}', :message => 'echo uses --switch to switch things'})
          # FYI, add_switch can also take a block and add_env
          # command blocks also have add_option, and add_arg, each of which can add environment variables which override themselves.
          # add_option actually has its own add_arg and each of those have add_env.  so meta
        end
      end

    # This example Rakefile should be kept in sync with the README.md file
    # This can be used by us and users as an example for all functionality

    desc 'parent task for dependent tasks. this one also uses two environment variables and two commands. This is for the reference file.'
      rototiller_task :parent_task do |task|
        # most method initializers take either a hash, or block syntax (see next task)
        task.add_env({:name     => 'RANDOM_VAR', :default => 'default value'})
        task.add_env({:name     => 'RANDOM_VAR2', :default => 'default value2'})
        task.add_command({:name => "echo 'i am running this command with $RANDOM_VAR = #{ENV['RANDOM_VAR']}'"})
        task.add_command({:name => "echo 'some other command!'"})
      end

    desc 'override command-name with environment variable. This is for the reference file.'
    rototiller_task :child => :parent_task do |task|
      task.add_command({:name => 'nonesuch', :add_env => {:name => 'COMMAND_EXE1'}})
      # block syntax here. We give up some lines for more readability
      task.add_command do |cmd|
        cmd.name = 'meneither'
        cmd.add_env({:name => 'COMMAND_EXE2'})
      end
    end


    desc "override a command-switch with environment variable"
    rototiller_task :variable_switch do |task|
      task.add_command do |cmd|
        cmd.name = 'echo command_name'
        cmd.add_switch do |s|
          s.name = '--switch'
          s.add_env({:name => 'CRASH_OVERRIDE'})
        end
        cmd.add_option do |o|
          o.name = '--option'
          o.add_env({:name => 'OPT_OVERRIDE'})
          o.add_argument do |arg|
            arg.name = 'argument'
            arg.add_env(:name => 'ARG_OVERRIDE', :message => 'message at the env for argument', :foo => 'this should fail')
            arg.message = 'This is the message at the argument level'
          end
        end
      end
    end
